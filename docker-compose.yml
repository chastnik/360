version: '3.8'

services:
  # База данных PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: assessment_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-assessment360}
      POSTGRES_USER: ${DB_USER:-assessment_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-assessment_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/src/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - assessment_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-assessment_user} -d ${DB_NAME:-assessment360}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: assessment_backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-assessment360}
      DB_USER: ${DB_USER:-assessment_user}
      DB_PASSWORD: ${DB_PASSWORD:-assessment_password}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      MATTERMOST_URL: ${MATTERMOST_URL:-}
      MATTERMOST_TOKEN: ${MATTERMOST_TOKEN:-}
      MATTERMOST_TEAM_ID: ${MATTERMOST_TEAM_ID:-}
      MATTERMOST_BOT_USERNAME: ${MATTERMOST_BOT_USERNAME:-360-assessment-bot}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - assessment_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (nginx + React)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: assessment_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - assessment_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: assessment_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - assessment_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD:-redis_password} ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  assessment_network:
    driver: bridge 