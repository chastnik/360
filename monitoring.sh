#!/bin/bash
# –ê–≤—Ç–æ—Ä: –°—Ç–∞—Å –ß–∞—à–∏–Ω @chastnik

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã 360¬∞ –æ—Ü–µ–Ω–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SLACK_WEBHOOK_URL="${SLACK_WEBHOOK_URL:-}"
EMAIL_TO="${EMAIL_TO:-}"
CHECK_INTERVAL="${CHECK_INTERVAL:-60}"
LOG_FILE="/var/log/assessment360-monitoring.log"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

error() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
send_notification() {
    local message="$1"
    local severity="$2"
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if [ "$severity" == "ERROR" ]; then
        error "$message"
    else
        log "$message"
    fi
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack
    if [ -n "$SLACK_WEBHOOK_URL" ]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"üö® 360¬∞ Assessment System: $message\"}" \
            "$SLACK_WEBHOOK_URL" &> /dev/null
    fi
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ email
    if [ -n "$EMAIL_TO" ]; then
        echo "$message" | mail -s "360¬∞ Assessment System Alert" "$EMAIL_TO" &> /dev/null
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    local failed_containers=()
    
    containers=("assessment_frontend" "assessment_backend" "assessment_db" "assessment_redis")
    
    for container in "${containers[@]}"; do
        if ! docker ps --filter "name=$container" --filter "status=running" | grep -q "$container"; then
            failed_containers+=("$container")
        fi
    done
    
    if [ ${#failed_containers[@]} -gt 0 ]; then
        send_notification "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: ${failed_containers[*]}" "ERROR"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    local failed_services=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    if ! curl -f http://localhost/health &> /dev/null; then
        failed_services+=("frontend")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    if ! curl -f http://localhost:5000/api/health &> /dev/null; then
        failed_services+=("backend")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if ! docker-compose exec -T database pg_isready -U assessment_user -d assessment360 &> /dev/null; then
        failed_services+=("database")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if ! docker-compose exec -T redis redis-cli ping &> /dev/null; then
        failed_services+=("redis")
    fi
    
    if [ ${#failed_services[@]} -gt 0 ]; then
        send_notification "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç: ${failed_services[*]}" "ERROR"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    local alerts=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
    disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 80 ]; then
        alerts+=("–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${disk_usage}%")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    memory_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    if [ "$memory_usage" -gt 90 ]; then
        alerts+=("–ü–∞–º—è—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ ${memory_usage}%")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    if (( $(echo "$cpu_usage > 80" | bc -l) )); then
        alerts+=("CPU –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ ${cpu_usage}%")
    fi
    
    if [ ${#alerts[@]} -gt 0 ]; then
        send_notification "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤: ${alerts[*]}" "WARNING"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    local error_count=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    error_count=$(docker-compose logs --since=5m 2>&1 | grep -i "error\|exception\|fatal" | wc -l)
    
    if [ "$error_count" -gt 10 ]; then
        send_notification "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $error_count –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç" "WARNING"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database_size() {
    local db_size
    db_size=$(docker-compose exec -T database psql -U assessment_user -d assessment360 -c "SELECT pg_size_pretty(pg_database_size('assessment360'));" -t | tr -d ' ')
    
    log "–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $db_size"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å—à–µ 5GB)
    db_size_bytes=$(docker-compose exec -T database psql -U assessment_user -d assessment360 -c "SELECT pg_database_size('assessment360');" -t | tr -d ' ')
    
    if [ "$db_size_bytes" -gt 5368709120 ]; then  # 5GB –≤ –±–∞–π—Ç–∞—Ö
        send_notification "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 5GB: $db_size" "WARNING"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl_certificates() {
    local cert_file="${SSL_CERT_PATH:-/etc/ssl/certs/your-domain.crt}"
    
    if [ -f "$cert_file" ]; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        expiry_date=$(openssl x509 -in "$cert_file" -noout -enddate | cut -d= -f2)
        expiry_timestamp=$(date -d "$expiry_date" +%s)
        current_timestamp=$(date +%s)
        days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
        
        if [ "$days_until_expiry" -lt 30 ]; then
            send_notification "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $days_until_expiry –¥–Ω–µ–π" "WARNING"
        fi
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    local report_file="/tmp/assessment360_report_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "=== –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã 360¬∞ –æ—Ü–µ–Ω–∫–∏ ===" > "$report_file"
    echo "–î–∞—Ç–∞: $(date)" >> "$report_file"
    echo "" >> "$report_file"
    
    echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ===" >> "$report_file"
    docker-compose ps >> "$report_file"
    echo "" >> "$report_file"
    
    echo "=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ===" >> "$report_file"
    echo "–î–∏—Å–∫: $(df -h / | tail -1 | awk '{print $5}')" >> "$report_file"
    echo "–ü–∞–º—è—Ç—å: $(free -h | grep Mem | awk '{print $3 "/" $2}')" >> "$report_file"
    echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%" >> "$report_file"
    echo "" >> "$report_file"
    
    echo "=== –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===" >> "$report_file"
    docker-compose exec -T database psql -U assessment_user -d assessment360 -c "SELECT pg_size_pretty(pg_database_size('assessment360'));" -t >> "$report_file"
    echo "" >> "$report_file"
    
    echo "=== –ù–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ ===" >> "$report_file"
    docker-compose logs --since=1h 2>&1 | grep -i "error\|exception\|fatal" | tail -20 >> "$report_file"
    
    echo "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ $report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor() {
    log "–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
    
    local all_checks_passed=true
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    if ! check_containers; then
        all_checks_passed=false
    fi
    
    if ! check_health; then
        all_checks_passed=false
    fi
    
    if ! check_resources; then
        all_checks_passed=false
    fi
    
    if ! check_logs; then
        all_checks_passed=false
    fi
    
    check_database_size
    check_ssl_certificates
    
    if [ "$all_checks_passed" = true ]; then
        log "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
continuous_monitoring() {
    log "–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${CHECK_INTERVAL}s)"
    
    while true; do
        monitor
        sleep "$CHECK_INTERVAL"
    done
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-monitor}" in
        monitor)
            monitor
            ;;
        continuous)
            continuous_monitoring
            ;;
        report)
            generate_report
            ;;
        containers)
            check_containers
            ;;
        health)
            check_health
            ;;
        resources)
            check_resources
            ;;
        logs)
            check_logs
            ;;
        help)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [monitor|continuous|report|containers|health|resources|logs|help]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  monitor     - –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  continuous  - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            echo "  report      - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"
            echo "  containers  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
            echo "  health      - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  resources   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"
            echo "  logs        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"
            echo "  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p "$(dirname "$LOG_FILE")"
touch "$LOG_FILE"

# –ó–∞–ø—É—Å–∫
main "$@" 