import databaseService from './database';

class RedisService {
  private client: any = null;
  // private isInitialized: boolean = false; // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
  private settings: any = null;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async initialize(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const connection = databaseService.getCurrentConnection();
      if (!connection) {
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É Redis');
        return;
      }
      
      const redisSettings = await connection('system_settings')
        .whereIn('setting_key', [
          'redis_enabled', 'redis_host', 'redis_port', 
          'redis_password', 'redis_db'
        ])
        .where('category', 'cache');

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —É–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç
      this.settings = redisSettings.reduce((acc: any, setting: any) => {
        acc[setting.setting_key] = this.convertValue(setting.setting_value, setting.setting_type);
        return acc;
      }, {});

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ Redis
      if (!this.settings.redis_enabled) {
        console.log('Redis –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        return;
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const options: any = {
        socket: {
          host: this.settings.redis_host || 'localhost',
          port: this.settings.redis_port || 6379
        },
        database: this.settings.redis_db || 0
      };

      // –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (this.settings.redis_password) {
        options.password = this.settings.redis_password;
      }

      // –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
      const { createClient } = require('redis');
      this.client = createClient(options);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.client.on('error', (err: Error) => {
        console.error('–û—à–∏–±–∫–∞ Redis:', err);
      });

      this.client.on('connect', () => {
        console.log('üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      });

      this.client.on('ready', () => {
        console.log('‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      });

      this.client.on('end', () => {
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ');
      });

      // –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      await this.client.connect();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis:', error);
      this.client = null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Redis
   */
  isAvailable(): boolean {
    return this.client !== null && this.client.isOpen;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
   */
  async get(key: string): Promise<string | null> {
    if (!this.isAvailable()) {
      return null;
    }

    try {
      return await this.client!.get(key);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis:', error);
      return null;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å TTL
   */
  async set(key: string, value: string, ttlSeconds?: number): Promise<boolean> {
    if (!this.isAvailable()) {
      return false;
    }

    try {
      if (ttlSeconds) {
        await this.client!.setEx(key, ttlSeconds, value);
      } else {
        await this.client!.set(key, value);
      }
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis:', error);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á
   */
  async del(key: string): Promise<boolean> {
    if (!this.isAvailable()) {
      return false;
    }

    try {
      const result = await this.client!.del(key);
      return result > 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Redis:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
   */
  async exists(key: string): Promise<boolean> {
    if (!this.isAvailable()) {
      return false;
    }

    try {
      const result = await this.client!.exists(key);
      return result === 1;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ Redis:', error);
      return false;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TTL –¥–ª—è –∫–ª—é—á–∞
   */
  async expire(key: string, seconds: number): Promise<boolean> {
    if (!this.isAvailable()) {
      return false;
    }

    try {
      const result = await this.client!.expire(key, seconds);
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TTL –≤ Redis:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å JSON –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async getJson<T>(key: string): Promise<T | null> {
    const value = await this.get(key);
    if (!value) return null;

    try {
      return JSON.parse(value) as T;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ Redis:', error);
      return null;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async setJson(key: string, value: any, ttlSeconds?: number): Promise<boolean> {
    try {
      const jsonString = JSON.stringify(value);
      return await this.set(key, jsonString, ttlSeconds);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –¥–ª—è Redis:', error);
      return false;
    }
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   */
  async reconnectWithNewSettings(): Promise<void> {
    // –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.client && this.client.isOpen) {
      await this.client.quit();
    }
    
    this.client = null;
    this.settings = null;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    await this.initialize();
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  async disconnect(): Promise<void> {
    if (this.client && this.client.isOpen) {
      await this.client.quit();
    }
    this.client = null;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
   */
  private convertValue(value: string, type: string): any {
    if (!value) return type === 'boolean' ? false : '';
    
    switch (type) {
      case 'boolean':
        return value.toLowerCase() === 'true';
      case 'number':
        return parseInt(value) || 0;
      case 'json':
        try {
          return JSON.parse(value);
        } catch {
          return {};
        }
      default:
        return value;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
const redisService = new RedisService();
export default redisService; 