// –ê–≤—Ç–æ—Ä: –°—Ç–∞—Å –ß–∞—à–∏–Ω @chastnik
/* eslint-disable no-console */
import { schedule, ScheduledTask } from 'node-cron';
import knex from '../database/connection';
import mattermostService from './mattermost';

class SchedulerService {
  private jobs: Map<string, ScheduledTask> = new Map();

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
   */
  start(): void {
    console.log('üïê –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...');

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 10:00
    const dailyReminders = schedule('0 10 * * *', () => {
      this.sendDailyReminders();
    }, { timezone: 'Europe/Moscow' });

    this.jobs.set('daily-reminders', dailyReminders);
    dailyReminders.start();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
    const checkCompletions = schedule('0 * * * *', () => {
      this.checkCompletedAssessments();
    }, { timezone: 'Europe/Moscow' });

    this.jobs.set('check-completions', checkCompletions);
    checkCompletions.start();

    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
   */
  stop(): void {
    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...');
    
    for (const [name, job] of this.jobs) {
      job.stop();
      job.destroy();
      console.log(`  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: ${name}`);
    }
    
    this.jobs.clear();
    console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  private async sendDailyReminders(): Promise<void> {
    try {
      console.log('üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');

      // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –æ–ø—Ä–æ—Å–∞–º–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–∏–∫–ª–∞—Ö
      const pendingRespondents = await knex('assessment_respondents')
        .join('assessment_participants', 'assessment_respondents.participant_id', 'assessment_participants.id')
        .join('assessment_cycles', 'assessment_participants.cycle_id', 'assessment_cycles.id')
        .join('users as respondent_users', 'assessment_respondents.respondent_user_id', 'respondent_users.id')
        .join('users as participant_users', 'assessment_participants.user_id', 'participant_users.id')
        .where('assessment_cycles.status', 'active')
        .where('assessment_respondents.status', 'pending')
        .whereNotNull('respondent_users.mattermost_username')
        .where('assessment_cycles.end_date', '>', knex.fn.now())
        .select(
          'assessment_respondents.id as respondent_id',
          'respondent_users.mattermost_username as respondent_username',
          'participant_users.first_name as participant_first_name',
          'participant_users.last_name as participant_last_name',
          'assessment_cycles.name as cycle_name',
          'assessment_cycles.end_date'
        );

      let sentCount = 0;
      let failedCount = 0;

      for (const respondent of pendingRespondents) {
        try {
          const participantName = `${respondent.participant_first_name} ${respondent.participant_last_name}`;
          // –ú–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
          // const endDate = new Date(respondent.end_date);
          // const daysLeft = Math.ceil((endDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));

          const success = await mattermostService.sendAssessmentReminder(
            respondent.respondent_username,
            participantName,
            respondent.cycle_name,
            respondent.respondent_id.toString()
          );

          if (success) {
            sentCount++;
          } else {
            failedCount++;
          }

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 200));
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${respondent.respondent_username}:`, error);
          failedCount++;
        }
      }

      console.log(`üì¨ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${sentCount} —É—Å–ø–µ—à–Ω–æ, ${failedCount} –Ω–µ—É–¥–∞—á–Ω–æ`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
   */
  private async checkCompletedAssessments(): Promise<void> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫...');

      // –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ—Ü–µ–Ω–∫—É
      const completedParticipants = await knex.raw(`
        SELECT 
          ap.id as participant_id,
          ap.user_id,
          ac.name as cycle_name,
          u.mattermost_username,
          u.first_name,
          u.last_name
        FROM assessment_participants ap
        JOIN assessment_cycles ac ON ap.cycle_id = ac.id
        JOIN users u ON ap.user_id = u.id
        WHERE ac.status = 'active'
          AND ap.status = 'active'
          AND u.mattermost_username IS NOT NULL
          AND NOT EXISTS (
            SELECT 1 FROM assessment_respondents ar 
            WHERE ar.participant_id = ap.id 
            AND ar.status IN ('pending', 'in_progress')
          )
          AND EXISTS (
            SELECT 1 FROM assessment_respondents ar 
            WHERE ar.participant_id = ap.id 
            AND ar.status = 'completed'
          )
      `);

      let notifiedCount = 0;

      for (const participant of completedParticipants.rows || []) {
        try {
          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const alreadyNotified = await knex('assessment_participants')
            .where('id', participant.participant_id)
            .where('completed_notification_sent', true)
            .first();

          if (alreadyNotified) {
            continue;
          }

          // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
          const success = await mattermostService.notifyAssessmentComplete(
            participant.mattermost_username,
            participant.cycle_name,
            participant.participant_id.toString()
          );

          if (success) {
            // –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            await knex('assessment_participants')
              .where('id', participant.participant_id)
              .update({ completed_notification_sent: true });

            notifiedCount++;

            // –¢–∞–∫–∂–µ —É–≤–µ–¥–æ–º–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            const manager = await knex('users')
              .where('id', (
                knex('users').where('id', participant.user_id).select('manager_id')
              ))
              .whereNotNull('mattermost_username')
              .first();

            if (manager) {
              await mattermostService.sendNotification({
                recipientUsername: manager.mattermost_username,
                title: 'üìä –û—Ü–µ–Ω–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                message: `–û—Ü–µ–Ω–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${participant.first_name} ${participant.last_name} –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${participant.cycle_name}" –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.`,
                actionUrl: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reports/participant/${participant.participant_id}`,
                actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç'
              });
            }
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–ª—è ${participant.mattermost_username}:`, error);
        }
      }

      if (notifiedCount > 0) {
        console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${notifiedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): { [key: string]: boolean } {
    const status: { [key: string]: boolean } = {};
    
    for (const [name, job] of this.jobs) {
      status[name] = job.getStatus() === 'scheduled';
    }
    
    return status;
  }
}

export default new SchedulerService();
