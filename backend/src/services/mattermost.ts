import axios, { AxiosInstance } from 'axios';
import dotenv from 'dotenv';

dotenv.config();

interface MattermostUser {
  id: string;
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  nickname: string;
  position: string;
  roles: string;
  locale: string;
  timezone: {
    useAutomaticTimezone: boolean;
    automaticTimezone: string;
    manualTimezone: string;
  };
}

interface MattermostChannel {
  id: string;
  create_at: number;
  update_at: number;
  delete_at: number;
  team_id: string;
  type: string;
  display_name: string;
  name: string;
  header: string;
  purpose: string;
  last_post_at: number;
  total_msg_count: number;
  extra_update_at: number;
  creator_id: string;
}

interface MattermostPost {
  id: string;
  create_at: number;
  update_at: number;
  edit_at: number;
  delete_at: number;
  is_pinned: boolean;
  user_id: string;
  channel_id: string;
  root_id: string;
  parent_id: string;
  original_id: string;
  message: string;
  type: string;
  props: any;
  hashtags: string;
  pending_post_id: string;
  reply_count: number;
  last_reply_at: number;
  participants: string[];
  metadata: {
    embeds: any[];
    emojis: any[];
    files: any[];
    images: any[];
    reactions: any[];
  };
}

interface MattermostNotification {
  recipientUsername: string;
  title: string;
  message: string;
  actionUrl?: string;
  actionText?: string;
}

class MattermostService {
  private client: AxiosInstance;
  private baseUrl: string;
  private token: string;
  private teamId: string;
  private botUsername: string;

  constructor() {
    this.baseUrl = process.env.MATTERMOST_URL || 'https://mattermost.company.com';
    this.token = process.env.MATTERMOST_TOKEN || '';
    this.teamId = process.env.MATTERMOST_TEAM_ID || '';
    this.botUsername = process.env.MATTERMOST_BOT_USERNAME || '360-assessment-bot';

    this.client = axios.create({
      baseURL: `${this.baseUrl}/api/v4`,
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost
   */
  async testConnection(): Promise<boolean> {
    try {
      await this.client.get('/users/me');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
   */
  async getUserByUsername(username: string): Promise<MattermostUser | null> {
    try {
      const response = await this.client.get(`/users/username/${username}`);
      return response.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  async getUserByEmail(email: string): Promise<MattermostUser | null> {
    try {
      const response = await this.client.get(`/users/email/${email}`);
      return response.data;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${email}:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥—ã
   */
  async getTeamUsers(): Promise<MattermostUser[]> {
    try {
      const response = await this.client.get(`/teams/${this.teamId}/members`);
      const members = response.data;
      
      const users = await Promise.all(
        members.map(async (member: any) => {
          const userResponse = await this.client.get(`/users/${member.user_id}`);
          return userResponse.data;
        })
      );
      
      return users;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥—ã:', error);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø—Ä—è–º–æ–π –∫–∞–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async createDirectChannel(userId: string): Promise<MattermostChannel | null> {
    try {
      const response = await this.client.post('/channels/direct', [
        userId,
        await this.getBotUserId()
      ]);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞
   */
  private async getBotUserId(): Promise<string> {
    const botUser = await this.getUserByUsername(this.botUsername);
    return botUser?.id || '';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
   */
  async sendMessage(channelId: string, message: string, props: any = {}): Promise<MattermostPost | null> {
    try {
      const response = await this.client.post('/posts', {
        channel_id: channelId,
        message: message,
        props: props
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(notification: MattermostNotification): Promise<boolean> {
    try {
      const user = await this.getUserByUsername(notification.recipientUsername);
      if (!user) {
        console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${notification.recipientUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return false;
      }

      const channel = await this.createDirectChannel(user.id);
      if (!channel) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${notification.recipientUsername}`);
        return false;
      }

      let message = `**${notification.title}**\n\n${notification.message}`;
      
      if (notification.actionUrl && notification.actionText) {
        message += `\n\n[${notification.actionText}](${notification.actionUrl})`;
      }

      const post = await this.sendMessage(channel.id, message);
      return post !== null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞ –æ—Ü–µ–Ω–∫–∏
   */
  async notifyAssessmentCycleStart(participantUsername: string, cycleTitle: string): Promise<boolean> {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const actionUrl = `${frontendUrl}/assessments`;
    
    return this.sendNotification({
      recipientUsername: participantUsername,
      title: 'üéØ –ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ü–µ–Ω–∫–∏',
      message: `–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ "${cycleTitle}" –±—ã–ª –∑–∞–ø—É—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ—Ü–µ–Ω–∫–µ.`,
      actionUrl: actionUrl,
      actionText: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–æ—Å–∞–º'
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏
   */
  async notifyRespondentAssessment(
    respondentUsername: string, 
    participantName: string, 
    cycleTitle: string, 
    respondentId: string
  ): Promise<boolean> {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const actionUrl = `${frontendUrl}/survey/${respondentId}`;
    
    return this.sendNotification({
      recipientUsername: respondentUsername,
      title: 'üìù –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –æ—Ü–µ–Ω–∫–∞',
      message: `–í–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å ${participantName} –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å.`,
      actionUrl: actionUrl,
      actionText: '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å'
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –æ–ø—Ä–æ—Å–µ
   */
  async sendAssessmentReminder(
    respondentUsername: string, 
    participantName: string, 
    cycleTitle: string, 
    respondentId: string
  ): Promise<boolean> {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const actionUrl = `${frontendUrl}/survey/${respondentId}`;
    
    return this.sendNotification({
      recipientUsername: respondentUsername,
      title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø—Ä–æ—Å–µ',
      message: `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ü–µ–Ω–∫—É ${participantName} –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}".`,
      actionUrl: actionUrl,
      actionText: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å'
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫
   */
  async notifyAssessmentComplete(
    participantUsername: string, 
    cycleTitle: string, 
    participantId: string
  ): Promise<boolean> {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const actionUrl = `${frontendUrl}/reports/participant/${participantId}`;
    
    return this.sendNotification({
      recipientUsername: participantUsername,
      title: '‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      message: `–í—Å–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}". –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É.`,
      actionUrl: actionUrl,
      actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç'
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞
   */
  async notifyCycleComplete(adminUsername: string, cycleTitle: string, cycleId: string): Promise<boolean> {
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const actionUrl = `${frontendUrl}/reports/cycle/${cycleId}`;
    
    return this.sendNotification({
      recipientUsername: adminUsername,
      title: 'üéâ –¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω',
      message: `–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ "${cycleTitle}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã.`,
      actionUrl: actionUrl,
      actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'
    });
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async sendBulkNotifications(notifications: MattermostNotification[]): Promise<{success: number, failed: number}> {
    let success = 0;
    let failed = 0;

    for (const notification of notifications) {
      try {
        const result = await this.sendNotification(notification);
        if (result) {
          success++;
        } else {
          failed++;
        }
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        failed++;
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    }

    return { success, failed };
  }
}

export default new MattermostService();
export { MattermostUser, MattermostChannel, MattermostPost, MattermostNotification }; 