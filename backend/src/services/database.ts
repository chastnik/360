import knex, { Knex } from 'knex';
import { config } from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
config({ path: path.resolve(__dirname, '../../.env') });

interface DatabaseSettings {
  host: string;
  port: number;
  database: string;
  user: string;
  password: string;
}

class DatabaseService {
  private envConnection: Knex | null = null;
  private runtimeConnection: Knex | null = null;
  private isInitialized: boolean = false;

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private createEnvConnection(): Knex {
    const config = {
      client: 'postgresql',
      connection: {
        host: process.env.DB_HOST || 'localhost',
        port: parseInt(process.env.DB_PORT || '5432'),
        database: process.env.DB_NAME || 'assessment_db',
        user: process.env.DB_USER || 'postgres',
        password: process.env.DB_PASSWORD || 'password',
      },
      pool: {
        min: 2,
        max: 10
      },
      migrations: {
        tableName: 'knex_migrations',
        directory: './migrations'
      },
      seeds: {
        directory: './seeds'
      }
    };

    return knex(config);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î
   */
  private createConnectionFromSettings(settings: DatabaseSettings): Knex {
    const config = {
      client: 'postgresql',
      connection: {
        host: settings.host,
        port: settings.port,
        database: settings.database,
        user: settings.user,
        password: settings.password,
      },
      pool: {
        min: 2,
        max: 10
      },
      migrations: {
        tableName: 'knex_migrations',
        directory: './migrations'
      },
      seeds: {
        directory: './seeds'
      }
    };

    return knex(config);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑ system_settings —Ç–∞–±–ª–∏—Ü—ã
   */
  private async getSettingsFromDatabase(connection: Knex): Promise<DatabaseSettings | null> {
    try {
      const settings = await connection('system_settings')
        .whereIn('setting_key', ['db_host', 'db_port', 'db_name', 'db_user', 'db_password'])
        .where('category', 'database');

      if (settings.length === 0) {
        return null;
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const settingsMap = settings.reduce((acc: any, setting: any) => {
        acc[setting.setting_key] = setting.setting_value;
        return acc;
      }, {});

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      if (!settingsMap.db_host || !settingsMap.db_name || !settingsMap.db_user) {
        console.warn('–ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –≤ system_settings, –∏—Å–ø–æ–ª—å–∑—É–µ–º .env');
        return null;
      }

      return {
        host: settingsMap.db_host,
        port: parseInt(settingsMap.db_port) || 5432,
        database: settingsMap.db_name,
        user: settingsMap.db_user,
        password: settingsMap.db_password || ''
      };
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑ system_settings:', error);
      return null;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
   */
  async initialize(): Promise<Knex> {
    if (this.isInitialized && this.getCurrentConnection()) {
      return this.getCurrentConnection()!;
    }

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ .env (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
      this.envConnection = this.createEnvConnection();
      console.log('üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ .env —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await this.envConnection.raw('SELECT 1');

      // 3. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
      try {
        const dbSettings = await this.getSettingsFromDatabase(this.envConnection);
        
        if (dbSettings) {
          // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç .env
          const envSettings: DatabaseSettings = {
            host: process.env.DB_HOST || 'localhost',
            port: parseInt(process.env.DB_PORT || '5432'),
            database: process.env.DB_NAME || 'assessment_db', 
            user: process.env.DB_USER || 'postgres',
            password: process.env.DB_PASSWORD || ''
          };

          const isDifferent = this.compareSettings(envSettings, dbSettings);
          
          if (isDifferent) {
            console.log('üîÑ –ù–∞–π–¥–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –≤ system_settings');
            
            // 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î
            const testConnection = this.createConnectionFromSettings(dbSettings);
            await testConnection.raw('SELECT 1');
            
            this.runtimeConnection = testConnection;
            console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑ system_settings');
            
            this.isInitialized = true;
            return this.runtimeConnection;
          }
        }
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º .env:', error);
      }

      // 6. –ò—Å–ø–æ–ª—å–∑—É–µ–º .env –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ .env');
      this.isInitialized = true;
      return this.envConnection;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
      throw error;
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
   */
  private compareSettings(env: DatabaseSettings, db: DatabaseSettings): boolean {
    return env.host !== db.host ||
           env.port !== db.port ||
           env.database !== db.database ||
           env.user !== db.user ||
           env.password !== db.password;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  getCurrentConnection(): Knex | null {
    return this.runtimeConnection || this.envConnection;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ .env (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –∏ –∞–¥–º–∏–Ω-–æ–ø–µ—Ä–∞—Ü–∏–π)
   */
  getEnvConnection(): Knex | null {
    return this.envConnection;
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ë–î
   */
  async reconnectWithDatabaseSettings(): Promise<boolean> {
    try {
      if (!this.envConnection) {
        throw new Error('–ù–µ—Ç .env –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }

      const dbSettings = await this.getSettingsFromDatabase(this.envConnection);
      
      if (!dbSettings) {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –≤ system_settings –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return false;
      }

      // –°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const newConnection = this.createConnectionFromSettings(dbSettings);
      await newConnection.raw('SELECT 1');

      // –ó–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä–æ–µ runtime –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      if (this.runtimeConnection) {
        await this.runtimeConnection.destroy();
      }

      // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      this.runtimeConnection = newConnection;
      console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  async testConnection(settings: DatabaseSettings): Promise<boolean> {
    let testConnection: Knex | null = null;
    
    try {
      testConnection = this.createConnectionFromSettings(settings);
      await testConnection.raw('SELECT 1');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
      return false;
    } finally {
      if (testConnection) {
        await testConnection.destroy();
      }
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async disconnect(): Promise<void> {
    try {
      if (this.runtimeConnection) {
        await this.runtimeConnection.destroy();
        this.runtimeConnection = null;
      }
      
      if (this.envConnection) {
        await this.envConnection.destroy(); 
        this.envConnection = null;
      }
      
      this.isInitialized = false;
      console.log('üîå –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
const databaseService = new DatabaseService();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const db = new Proxy({} as Knex, {
  get(_target, prop, receiver) {
    const connection = databaseService.getCurrentConnection();
    if (!connection) {
      throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ databaseService.initialize() –ø–µ—Ä–≤—ã–º.');
    }
    return Reflect.get(connection, prop, receiver);
  }
});

export default databaseService;
export { DatabaseService }; 