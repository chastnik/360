"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
class MattermostService {
    constructor() {
        this.baseUrl = process.env.MATTERMOST_URL || 'https://mattermost.company.com';
        this.token = process.env.MATTERMOST_TOKEN || '';
        this.teamId = process.env.MATTERMOST_TEAM_ID || '';
        this.botUsername = process.env.MATTERMOST_BOT_USERNAME || '360-assessment-bot';
        this.client = axios_1.default.create({
            baseURL: `${this.baseUrl}/api/v4`,
            headers: {
                'Authorization': `Bearer ${this.token}`,
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });
    }
    async testConnection() {
        try {
            await this.client.get('/users/me');
            return true;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost:', error);
            return false;
        }
    }
    async getUserByUsername(username) {
        try {
            const response = await this.client.get(`/users/username/${username}`);
            return response.data;
        }
        catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, error);
            return null;
        }
    }
    async getUserByEmail(email) {
        try {
            const response = await this.client.get(`/users/email/${email}`);
            return response.data;
        }
        catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${email}:`, error);
            return null;
        }
    }
    async getTeamUsers() {
        try {
            const response = await this.client.get(`/teams/${this.teamId}/members`);
            const members = response.data;
            const users = await Promise.all(members.map(async (member) => {
                const userResponse = await this.client.get(`/users/${member.user_id}`);
                return userResponse.data;
            }));
            return users;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥—ã:', error);
            return [];
        }
    }
    async createDirectChannel(userId) {
        try {
            const response = await this.client.post('/channels/direct', [
                userId,
                await this.getBotUserId()
            ]);
            return response.data;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            return null;
        }
    }
    async getBotUserId() {
        const botUser = await this.getUserByUsername(this.botUsername);
        return botUser?.id || '';
    }
    async sendMessage(channelId, message, props = {}) {
        try {
            const response = await this.client.post('/posts', {
                channel_id: channelId,
                message: message,
                props: props
            });
            return response.data;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return null;
        }
    }
    async sendNotification(notification) {
        try {
            const user = await this.getUserByUsername(notification.recipientUsername);
            if (!user) {
                console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${notification.recipientUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return false;
            }
            const channel = await this.createDirectChannel(user.id);
            if (!channel) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${notification.recipientUsername}`);
                return false;
            }
            let message = `**${notification.title}**\n\n${notification.message}`;
            if (notification.actionUrl && notification.actionText) {
                message += `\n\n[${notification.actionText}](${notification.actionUrl})`;
            }
            const post = await this.sendMessage(channel.id, message);
            return post !== null;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }
    async notifyAssessmentCycleStart(participantUsername, cycleTitle) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/assessments`;
        return this.sendNotification({
            recipientUsername: participantUsername,
            title: 'üéØ –ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ü–µ–Ω–∫–∏',
            message: `–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ "${cycleTitle}" –±—ã–ª –∑–∞–ø—É—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ—Ü–µ–Ω–∫–µ.`,
            actionUrl: actionUrl,
            actionText: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–æ—Å–∞–º'
        });
    }
    async notifyRespondentAssessment(respondentUsername, participantName, cycleTitle, respondentId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/survey/${respondentId}`;
        return this.sendNotification({
            recipientUsername: respondentUsername,
            title: 'üìù –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –æ—Ü–µ–Ω–∫–∞',
            message: `–í–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å ${participantName} –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å.`,
            actionUrl: actionUrl,
            actionText: '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å'
        });
    }
    async sendAssessmentReminder(respondentUsername, participantName, cycleTitle, respondentId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/survey/${respondentId}`;
        return this.sendNotification({
            recipientUsername: respondentUsername,
            title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø—Ä–æ—Å–µ',
            message: `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ü–µ–Ω–∫—É ${participantName} –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}".`,
            actionUrl: actionUrl,
            actionText: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å'
        });
    }
    async notifyAssessmentComplete(participantUsername, cycleTitle, participantId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/reports/participant/${participantId}`;
        return this.sendNotification({
            recipientUsername: participantUsername,
            title: '‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            message: `–í—Å–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}". –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É.`,
            actionUrl: actionUrl,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç'
        });
    }
    async notifyCycleComplete(adminUsername, cycleTitle, cycleId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/reports/cycle/${cycleId}`;
        return this.sendNotification({
            recipientUsername: adminUsername,
            title: 'üéâ –¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω',
            message: `–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ "${cycleTitle}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã.`,
            actionUrl: actionUrl,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'
        });
    }
    async sendBulkNotifications(notifications) {
        let success = 0;
        let failed = 0;
        for (const notification of notifications) {
            try {
                const result = await this.sendNotification(notification);
                if (result) {
                    success++;
                }
                else {
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            catch (error) {
                failed++;
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        }
        return { success, failed };
    }
}
exports.default = new MattermostService();
//# sourceMappingURL=mattermost.js.map