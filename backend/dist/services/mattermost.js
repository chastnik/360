"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
class MattermostService {
    constructor() {
        this.baseUrl = process.env.MATTERMOST_URL || 'https://mattermost.company.com';
        this.token = process.env.MATTERMOST_TOKEN || '';
        this.teamId = process.env.MATTERMOST_TEAM_ID || '';
        this.botUsername = process.env.MATTERMOST_BOT_USERNAME || '360-assessment-bot';
        this.client = axios_1.default.create({
            baseURL: `${this.baseUrl}/api/v4`,
            headers: {
                'Authorization': `Bearer ${this.token}`,
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });
    }
    async testConnection() {
        try {
            await this.client.get('/users/me');
            return true;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost:', error);
            return false;
        }
    }
    async getUserByUsername(username) {
        try {
            const response = await this.client.get(`/users/username/${username}`);
            return response.data;
        }
        catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, error);
            return null;
        }
    }
    async getUserByEmail(email) {
        try {
            const response = await this.client.get(`/users/email/${email}`);
            return response.data;
        }
        catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${email}:`, error);
            return null;
        }
    }
    async getUserById(userId) {
        try {
            const response = await this.client.get(`/users/${userId}`);
            return response.data;
        }
        catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
            return null;
        }
    }
    async getTeamUsers() {
        try {
            const response = await this.client.get(`/teams/${this.teamId}/members`);
            const members = response.data;
            const users = await Promise.all(members.map(async (member) => {
                const userResponse = await this.client.get(`/users/${member.user_id}`);
                return userResponse.data;
            }));
            return users;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥—ã:', error);
            return [];
        }
    }
    async getAllUsers() {
        try {
            const users = [];
            let page = 0;
            const perPage = 100;
            let pageUsers = [];
            do {
                const response = await this.client.get(`/users?page=${page}&per_page=${perPage}&active=true`);
                pageUsers = response.data;
                if (Array.isArray(pageUsers) && pageUsers.length > 0) {
                    users.push(...pageUsers);
                }
                page++;
            } while (Array.isArray(pageUsers) && pageUsers.length === perPage);
            return users;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }
    async createDirectChannel(userId) {
        try {
            const response = await this.client.post('/channels/direct', [
                userId,
                await this.getBotUserId()
            ]);
            return response.data;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            return null;
        }
    }
    async getBotUserId() {
        const botUser = await this.getUserByUsername(this.botUsername);
        return botUser?.id || '';
    }
    async sendMessage(channelId, message, props = {}) {
        try {
            const response = await this.client.post('/posts', {
                channel_id: channelId,
                message: message,
                props: props
            });
            return response.data;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return null;
        }
    }
    async sendNotification(notification) {
        try {
            const user = await this.getUserByUsername(notification.recipientUsername);
            if (!user) {
                console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${notification.recipientUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return false;
            }
            const channel = await this.createDirectChannel(user.id);
            if (!channel) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${notification.recipientUsername}`);
                return false;
            }
            let message = `**${notification.title}**\n\n${notification.message}`;
            if (notification.actionUrl && notification.actionText) {
                message += `\n\n[${notification.actionText}](${notification.actionUrl})`;
            }
            const post = await this.sendMessage(channel.id, message);
            return post !== null;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }
    async notifyAssessmentCycleStart(participantUsername, cycleTitle) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/assessments`;
        return this.sendNotification({
            recipientUsername: participantUsername,
            title: 'üéØ –ó–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ü–µ–Ω–∫–∏',
            message: `–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ "${cycleTitle}" –±—ã–ª –∑–∞–ø—É—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ—Ü–µ–Ω–∫–µ.`,
            actionUrl: actionUrl,
            actionText: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–æ—Å–∞–º'
        });
    }
    async notifyRespondentAssessment(respondentUsername, participantName, cycleTitle, respondentId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/survey/${respondentId}`;
        return this.sendNotification({
            recipientUsername: respondentUsername,
            title: 'üìù –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–∞ –æ—Ü–µ–Ω–∫–∞',
            message: `–í–∞—Å –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å ${participantName} –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å.`,
            actionUrl: actionUrl,
            actionText: '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å'
        });
    }
    async sendAssessmentReminder(respondentUsername, participantName, cycleTitle, respondentId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/survey/${respondentId}`;
        return this.sendNotification({
            recipientUsername: respondentUsername,
            title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø—Ä–æ—Å–µ',
            message: `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ü–µ–Ω–∫—É ${participantName} –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}".`,
            actionUrl: actionUrl,
            actionText: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å'
        });
    }
    async notifyAssessmentComplete(participantUsername, cycleTitle, participantId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/reports/participant/${participantId}`;
        return this.sendNotification({
            recipientUsername: participantUsername,
            title: '‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            message: `–í—Å–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –≤ —Ä–∞–º–∫–∞—Ö —Ü–∏–∫–ª–∞ "${cycleTitle}". –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É.`,
            actionUrl: actionUrl,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç'
        });
    }
    async notifyCycleComplete(adminUsername, cycleTitle, cycleId) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/reports/cycle/${cycleId}`;
        return this.sendNotification({
            recipientUsername: adminUsername,
            title: 'üéâ –¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω',
            message: `–¶–∏–∫–ª –æ—Ü–µ–Ω–∫–∏ "${cycleTitle}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã.`,
            actionUrl: actionUrl,
            actionText: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É'
        });
    }
    async sendBulkNotifications(notifications) {
        let success = 0;
        let failed = 0;
        for (const notification of notifications) {
            try {
                const result = await this.sendNotification(notification);
                if (result) {
                    success++;
                }
                else {
                    failed++;
                }
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            catch (error) {
                failed++;
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        }
        return { success, failed };
    }
    async requestRespondentSelection(participantUsername, cycleTitle, participantId, minRespondents = 4) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const actionUrl = `${frontendUrl}/assessments/select-respondents/${participantId}`;
        return this.sendNotification({
            recipientUsername: participantUsername,
            title: 'üë• –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤',
            message: `–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ü–∏–∫–ª–µ –æ—Ü–µ–Ω–∫–∏ "${cycleTitle}" –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º ${minRespondents} —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –¥–∞—Ç—å –≤–∞–º –æ—Ü–µ–Ω–∫—É.\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –ø–æ:\n‚Ä¢ Email –∞–¥—Ä–µ—Å—É\n‚Ä¢ –ò–º–µ–Ω–∏ –≤ Mattermost (@username)\n‚Ä¢ –ü–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏\n\n–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞.`,
            actionUrl: actionUrl,
            actionText: '–í—ã–±—Ä–∞—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤'
        });
    }
    async searchUsers(query) {
        try {
            const results = [];
            if (query.startsWith('@')) {
                const username = query.substring(1);
                const user = await this.getUserByUsername(username);
                if (user)
                    results.push(user);
            }
            if (query.includes('@') && !query.startsWith('@')) {
                const user = await this.getUserByEmail(query);
                if (user)
                    results.push(user);
            }
            const searchResponse = await this.client.post('/users/search', {
                term: query,
                allow_inactive: false
            });
            if (searchResponse.data && Array.isArray(searchResponse.data)) {
                results.push(...searchResponse.data);
            }
            const uniqueResults = results.filter((user, index, self) => index === self.findIndex(u => u.id === user.id));
            return uniqueResults;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }
    async confirmRespondent(participantUsername, foundUser, participantId, query) {
        const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
        const confirmUrl = `${frontendUrl}/api/assessments/confirm-respondent/${participantId}/${foundUser.id}`;
        return this.sendNotification({
            recipientUsername: participantUsername,
            title: '‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            message: `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n**${foundUser.first_name} ${foundUser.last_name}**\n@${foundUser.username}\n${foundUser.email}\n${foundUser.position || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n–≠—Ç–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞?`,
            actionUrl: confirmUrl,
            actionText: '–î–∞, –¥–æ–±–∞–≤–∏—Ç—å'
        });
    }
    async testDirectChannelCreation(username) {
        try {
            const user = await this.getUserByUsername(username);
            if (!user) {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return false;
            }
            const channel = await this.createDirectChannel(user.id);
            if (!channel) {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª —Å ${username}`);
                return false;
            }
            console.log(`‚úÖ –ü—Ä—è–º–æ–π –∫–∞–Ω–∞–ª —Å ${username} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
            return true;
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —Å ${username}:`, error);
            return false;
        }
    }
}
exports.default = new MattermostService();
//# sourceMappingURL=mattermost.js.map