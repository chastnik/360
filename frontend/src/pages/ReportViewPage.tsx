// –ê–≤—Ç–æ—Ä: –°—Ç–∞—Å –ß–∞—à–∏–Ω @chastnik
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
// Layout —É–±—Ä–∞–Ω - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ Layout –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–∏–Ω–≥–∞
import { 
  CategoryBarChart, 
  CategoryRadarChart, 
  OverallScoreDisplay, 
  ScoreDistributionChart 
} from '../components/ReportCharts';
import api from '../services/api';

interface Report {
  id: number;
  cycle_id: number;
  user_id: number;
  cycle_name: string;
  participant_name: string;
  data: string;
  created_at: string;
  updated_at: string;
}

interface ReportData {
  overallAverage: number;
  categoryAverages: Array<{
    id: number;
    name: string;
    color: string;
    average: number;
    count: number;
    distribution: {
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
    };
  }>;
  strengths: Array<{
    id: number;
    name: string;
    color: string;
    average: number;
  }>;
  weaknesses: Array<{
    id: number;
    name: string;
    color: string;
    average: number;
  }>;
  totalResponses: number;
  responseDistribution: {
    1: number;
    2: number;
    3: number;
    4: number;
    5: number;
  };
}

export const ReportViewPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [report, setReport] = useState<Report | null>(null);
  const [reportData, setReportData] = useState<ReportData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadReport = useCallback(async () => {
    try {
      setLoading(true);
      const response = await api.get(`/reports/${id}`);
      setReport(response.data);
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
      const parsedData = JSON.parse(response.data.data);
      setReportData(parsedData);
      setError(null);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
      setError(error.response?.data?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞');
    } finally {
      setLoading(false);
    }
  }, [id]);

  useEffect(() => {
    if (id) {
      loadReport();
    }
  }, [id, loadReport]);

  const getScoreColor = (score: number) => {
    if (score >= 4.5) return 'text-green-600';
    if (score >= 3.5) return 'text-blue-600';
    if (score >= 2.5) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreText = (score: number) => {
    if (score >= 4.5) return '–û—Ç–ª–∏—á–Ω–æ';
    if (score >= 3.5) return '–•–æ—Ä–æ—à–æ';
    if (score >= 2.5) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
    return '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
  };

  const exportReport = () => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
    console.log('–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞...');
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  if (error || !report || !reportData) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
        {error || '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <button
              onClick={() => navigate('/reports')}
              className="flex items-center text-gray-500 hover:text-gray-700 mb-2"
            >
              <span className="mr-2">‚Üê</span>
              –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º
            </button>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              –û—Ç—á–µ—Ç –æ—Ü–µ–Ω–∫–∏: {report.participant_name}
            </h1>
            <p className="text-gray-600 dark:text-gray-300">
              {report.cycle_name} ‚Ä¢ –°–æ–∑–¥–∞–Ω: {new Date(report.created_at).toLocaleDateString()}
            </p>
          </div>
          <div className="flex gap-2">
            <button
              onClick={exportReport}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              –≠–∫—Å–ø–æ—Ä—Ç PDF
            </button>
            <button
              onClick={() => navigate('/reports')}
              className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>

        {/* –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <OverallScoreDisplay
            score={reportData.overallAverage}
            title="–û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª"
          />
          
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-300">–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤:</span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {reportData.totalResponses}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600 dark:text-gray-300">–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</span>
                <span className="font-medium text-gray-900 dark:text-white">
                  {reportData.categoryAverages.length}
                </span>
              </div>
            </div>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
              –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            </h3>
            <div className="text-center">
              <div className={`text-2xl font-bold mb-2 ${getScoreColor(reportData.overallAverage)}`}>
                {getScoreText(reportData.overallAverage)}
              </div>
              <div className="text-sm text-gray-500 dark:text-gray-400">
                –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ {reportData.totalResponses} –æ—Ç–≤–µ—Ç–∞—Ö
              </div>
            </div>
          </div>
        </div>

        {/* –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4 flex items-center">
              <span className="text-green-500 mr-2">üí™</span>
              –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
            </h3>
            <div className="space-y-3">
              {reportData.strengths.map((strength, index) => (
                <div key={strength.id} className="flex justify-between items-center p-3 bg-green-50 dark:bg-green-900/20 rounded">
                  <div className="flex items-center">
                    <div className="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3">
                      {index + 1}
                    </div>
                    <span className="font-medium text-gray-900 dark:text-white">
                      {strength.name}
                    </span>
                  </div>
                  <span className="text-green-600 font-bold">
                    {strength.average.toFixed(1)}
                  </span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4 flex items-center">
              <span className="text-orange-500 mr-2">üéØ</span>
              –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
            </h3>
            <div className="space-y-3">
              {reportData.weaknesses.map((weakness, index) => (
                <div key={weakness.id} className="flex justify-between items-center p-3 bg-orange-50 dark:bg-orange-900/20 rounded">
                  <div className="flex items-center">
                    <div className="w-6 h-6 bg-orange-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3">
                      {index + 1}
                    </div>
                    <span className="font-medium text-gray-900 dark:text-white">
                      {weakness.name}
                    </span>
                  </div>
                  <span className="text-orange-600 font-bold">
                    {weakness.average.toFixed(1)}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫–∏ */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <CategoryBarChart
            data={reportData.categoryAverages}
            title="–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
          />
          <CategoryRadarChart
            data={reportData.categoryAverages}
            title="–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π"
          />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          <ScoreDistributionChart
            distribution={reportData.responseDistribution}
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫"
          />
          
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
              –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            </h3>
            <div className="space-y-4">
              {reportData.categoryAverages.map(category => (
                <div key={category.id} className="border-b border-gray-200 dark:border-gray-700 pb-4 last:border-b-0">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-medium text-gray-900 dark:text-white">
                      {category.name}
                    </h4>
                    <span className={`text-lg font-bold ${getScoreColor(category.average)}`}>
                      {category.average.toFixed(1)}
                    </span>
                  </div>
                  <div className="text-sm text-gray-500 dark:text-gray-400 mb-2">
                    –û—Ü–µ–Ω–æ–∫: {category.count}
                  </div>
                  <div className="flex space-x-1">
                    {Object.entries(category.distribution).map(([score, count]) => (
                      <div key={score} className="flex-1 text-center">
                        <div className="text-xs text-gray-500 dark:text-gray-400">{score}</div>
                        <div className="text-sm font-medium text-gray-900 dark:text-white">{count}</div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6">
          <h3 className="text-lg font-medium text-blue-900 dark:text-blue-100 mb-4">
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
          </h3>
          <div className="space-y-3 text-blue-800 dark:text-blue-200">
            <div>
              <strong>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</strong> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –≤ –æ–±–ª–∞—Å—Ç—è—Ö {reportData.strengths.map(s => s.name).join(', ')}. 
              –≠—Ç–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å –≤–∞—à–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏.
            </div>
            <div>
              <strong>–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</strong> –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –æ–±–ª–∞—Å—Ç—è—Ö {reportData.weaknesses.map(w => w.name).join(', ')}. 
              –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞.
            </div>
            <div>
              <strong>–û–±—â–∏–π —Å–æ–≤–µ—Ç:</strong> –í–∞—à —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª {reportData.overallAverage.toFixed(1)} –∏–∑ 5.0 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {getScoreText(reportData.overallAverage).toLowerCase()} —É—Ä–æ–≤–µ–Ω—å. 
              –†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ–±–ª–∞—Å—Ç—è–º–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø–æ–º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
            </div>
          </div>
        </div>
      </div>
  );
}; 